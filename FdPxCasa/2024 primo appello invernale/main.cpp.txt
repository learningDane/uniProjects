#include <iostream>
#include <cstring>
using namespace std;

class OggettiViaggio{
private:
    struct Oggetto{
        char descrizione[40];
        bool preso = false; //true = preso
        Oggetto*link = nullptr;
    };
    Oggetto*head = nullptr;
public:
    explicit OggettiViaggio() = default;
    friend ostream& operator<<(ostream& os, const OggettiViaggio ov) {
        if (ov.head == nullptr) { return os; }
        Oggetto* temp = ov.head;
        while (temp != nullptr) {
            os << ((temp->preso) ? "X " : "- ") << temp->descrizione << endl;
            temp = temp->link;
        }
        os << endl;
        return os;
    }
    void aggiungi(char descr[]) {
        if ( strlen(descr) > 40) { return;}
        if (head == nullptr) {
            head = new Oggetto;
            strcpy(head->descrizione, descr);
            return;
        }
        Oggetto*temp = head;
        while ( temp->link != nullptr) {
            if ( strcmp(temp->descrizione, descr) == 0) { return; }
            temp = temp->link;
        }
        temp->link = new Oggetto;
        temp=temp->link;
        strcpy(temp->descrizione, descr);
    }
    void prendi(char descr[]) {
        Oggetto*temp = head;
        while (temp != nullptr) {
            if ( strcmp(descr, temp->descrizione) == 0) {
                temp->preso = true;
                return;
            }
            temp = temp->link;
        }
    }
    void viaggia() {
        Oggetto*temp = head;
        while (temp != nullptr) {
            temp->preso = false;
            temp = temp->link;
        }
    }
    OggettiViaggio(const OggettiViaggio& altroOv) {
        // Initialize head to nullptr for the new object
        head = nullptr;

        if (altroOv.head == nullptr) {
            return;
        }

        // Copy the first element
        head = new Oggetto;
        strcpy(head->descrizione, altroOv.head->descrizione);
        head->preso = altroOv.head->preso;

        // Copy the rest of the list
        Oggetto* altroTemp = altroOv.head->link;
        Oggetto* temp = head;

        while (altroTemp != nullptr) {
            temp->link = new Oggetto;
            temp = temp->link;
            strcpy(temp->descrizione, altroTemp->descrizione);
            temp->preso = altroTemp->preso;
            altroTemp = altroTemp->link;
        }

        temp->link = nullptr; // Ensure the last node points to null
    }
    virtual ~OggettiViaggio() {
        while (head != nullptr) {
            Oggetto*temp = head;
            head = head->link;
            delete temp;
        }
    }
    void rimuovi(char descr[]) {
        if (strlen(descr) > 40) {return;}
        Oggetto*temp = head;
        if ( strcmp(head->descrizione,descr) == 0) {
            head = head->link;
            delete temp;
            return;
        }
        Oggetto*temp2 = temp->link;
        while (temp2 !=nullptr) {
            if ( strcmp(temp2->descrizione,descr) == 0 ) {
                temp->link = temp2->link;
                delete temp2;
                return;
            }
            temp = temp->link;
            temp2 = temp2->link;
        }
    }
    void operator+=(OggettiViaggio altroOv) {
        Oggetto*temp=head;
        while(temp != nullptr) {
            temp = temp->link;
        }
        temp = altroOv.head;
    }
    OggettiViaggio operator!() const {
        OggettiViaggio result;
        Oggetto*temp = head;

        while (temp != nullptr) {
            if (!temp->preso) {
                result.aggiungi(temp->descrizione);
            }
            temp = temp->link;
        }

        return result;
    }
};

int main(){

    cout << "--- PRIMA PARTE ---" << endl;
    cout << "Test costruttore e funzione aggiungi" << endl;
    OggettiViaggio ov;
    ov.aggiungi("Caricatore");
    ov.aggiungi("Cuffie");
    ov.aggiungi("Macchina fotografica");
    ov.aggiungi("Documenti");
    ov.aggiungi("Biglietti aereo");
    ov.aggiungi("Vestiti");
    cout << ov << endl;

    cout << "Test funzione prendi" << endl;
    ov.prendi("Documenti");
    ov.prendi("Macchina fotografica");
    ov.prendi("Caricatore");
    cout << ov << endl;

    cout << "Test funzione viaggia" << endl;
    ov.viaggia();
    cout << ov << endl;

    cout << "Test costruttore di copia" << endl;
    OggettiViaggio ov2 = ov;
    ov2.aggiungi("Oggetto 1");
    ov2.aggiungi("Oggetto 2");
    ov2.aggiungi("Oggetto 3");
    cout << ov2 << endl;


    cout << "--- SECONDA PARTE ---" << endl;
    cout << "Test eventuale distruttore" << endl;
    {
        OggettiViaggio ov3;
        ov3.aggiungi("Oggetto 1");
        ov3.aggiungi("Oggetto 2");
        ov3.aggiungi("Oggetto 3");
    }
    cout << "Distruttore chiamato" << endl;

    cout << "Test operatore +=" << endl;
    ov.prendi("Cuffie");
    ov.prendi("Macchina fotografica");
    OggettiViaggio ov3;
    ov3.aggiungi("Spazzolino");
    ov3.aggiungi("Dentifricio");
    ov3.aggiungi("Occhiali da sole");
    ov3.prendi("Occhiali da sole");
    ov += ov3;
    cout << ov << endl;

    cout << "Test funzione rimuovi" << endl;
    ov.rimuovi("Cuffie");
    ov.rimuovi("Macchina fotografica");
    ov.rimuovi("Caricatore");
    cout << ov << endl;

    cout << "Test operatore di negazione logica" << endl;
    ov.prendi("Vestiti");
    ov.prendi("Documenti");
    cout << !ov << endl;


    cout << "--- TERZA PARTE ---" << endl;
    cout << "Test funzione aggiungi con input non validi" << endl;
    ov.aggiungi("Oggetto di lunghezza maggiore di quaranta caratteri"); // non aggiunge
    ov.aggiungi(""); // lo deve aggiungere
    ov.aggiungi("Spazzolino"); // gia' presente
    ov.aggiungi("Occhiali da sole"); // gia' presente
    cout << ov << endl;

    cout << "Test funzione prendi con input non validi" << endl;
    ov.prendi("Oggetto fuori lista"); // non prende
    ov.prendi("Occhiali da sole"); // oggetto gia' preso
    cout << ov << endl;

    cout << "Test funzione rimuovi" << endl;
    ov.rimuovi("Oggetto fuori lista"); // non rimuove
    ov.rimuovi("");
    cout << ov << endl;

    cout << "Test operatore negazione logica" << endl;
    ov.prendi("Biglietti aereo");
    ov.prendi("Spazzolino");
    ov.prendi("Dentifricio");
    const OggettiViaggio ov4 = ov;
    cout << ov4 << endl << !ov4 << endl;

    cout << "Test operatore +=" << endl;
    ov.viaggia();
    ov.prendi("Spazzolino");
    ov.prendi("Dentifricio");
    OggettiViaggio ov5;
    ov5.aggiungi("Documenti");
    ov5.aggiungi("Spazzolino");
    ov5.aggiungi("Biglietti aereo");
    ov5.prendi("Biglietti aereo");
    ov5.aggiungi("Phono");
    ov += ov5;
    cout << ov << endl;

    return 0;
}